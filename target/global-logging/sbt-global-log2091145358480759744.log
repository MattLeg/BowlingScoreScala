[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\sorge\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\sorge\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.4 (Oracle Corporation Java 10.0.1)
[debug]       Load.loadUnit: plugins took 75.3823ms
[debug]       Load.loadUnit: defsScala took 0.2749ms
[debug] [Loading] Scanning directory C:\Users\sorge\.sbt\1.0\plugins
[debug]         Load.loadUnit: mkEval took 6.3347ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sorge\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.6407 ms
[info] loading settings for project global-plugins from idea.sbt ...
[debug]           Load.resolveProject(global-plugins) took 42.2036ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\sorge\.sbt\1.0\plugins, plugins: List(<none>))) took 80.5613ms
[debug] [Loading] Done in C:\Users\sorge\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 175.8571ms
[debug]       Load.loadUnit: cleanEvalClasses took 6.0569ms
[debug]     Load.loadUnit(file:/C:/Users/sorge/.sbt/1.0/plugins/, ...) took 264.3505ms
[debug]   Load.apply: load took 403.2554ms
[debug]   Load.apply: resolveProjects took 4.597ms
[debug]   Load.apply: finalTransforms took 85.743ms
[debug]   Load.apply: config.delegates took 13.5288ms
[debug]   Load.apply: Def.make(settings)... took 405.6985ms
[debug]   Load.apply: structureIndex took 87.7972ms
[debug]   Load.apply: mkStreams took 1.3765ms
[info] loading global plugins from C:\Users\sorge\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2374.3241ms
[debug]           Load.loadUnit: plugins took 32.0796ms
[debug]           Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\sorge\IdeaProjects\BowlingScore\project
[debug]             Load.loadUnit: mkEval took 1.1544ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sorge\IdeaProjects\BowlingScore\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3672 ms
[info] loading settings for project bowlingscore-build from idea.sbt ...
[debug]               Load.resolveProject(bowlingscore-build) took 1.6264ms
[debug]             Load.loadTransitive: finalizeProject(Project(id bowlingscore-build, base: C:\Users\sorge\IdeaProjects\BowlingScore\project, plugins: List(<none>))) took 3.4179ms
[debug] [Loading] Done in C:\Users\sorge\IdeaProjects\BowlingScore\project, returning: (bowlingscore-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2039.3635ms
[debug]           Load.loadUnit: cleanEvalClasses took 1.5424ms
[debug]         Load.loadUnit(file:/C:/Users/sorge/IdeaProjects/BowlingScore/project/, ...) took 2074.8774ms
[debug]       Load.apply: load took 2076.7099ms
[debug]       Load.apply: resolveProjects took 0.0905ms
[debug]       Load.apply: finalTransforms took 7.7167ms
[debug]       Load.apply: config.delegates took 2.7744ms
[debug]       Load.apply: Def.make(settings)... took 142.8033ms
[debug]       Load.apply: structureIndex took 53.2315ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from C:\Users\sorge\IdeaProjects\BowlingScore\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4464.9496ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\sorge\IdeaProjects\BowlingScore
[debug]       Load.loadUnit: mkEval took 0.2266ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sorge\IdeaProjects\BowlingScore, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5242 ms
[info] loading settings for project bowlingscore from build.sbt ...
[debug]         Load.resolveProject(bowlingscore) took 42.6983ms
[debug]       Load.loadTransitive: finalizeProject(Project(id bowlingscore, base: C:\Users\sorge\IdeaProjects\BowlingScore, plugins: List(<none>))) took 45.0887ms
[debug] [Loading] Done in C:\Users\sorge\IdeaProjects\BowlingScore, returning: (bowlingscore)
[debug]     Load.loadUnit: loadedProjectsRaw took 917.7416ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.8028ms
[debug]   Load.loadUnit(file:/C:/Users/sorge/IdeaProjects/BowlingScore/, ...) took 5398.9996ms
[debug] Load.apply: load took 5400.4106ms
[debug] Load.apply: resolveProjects took 0.0831ms
[debug] Load.apply: finalTransforms took 23.32ms
[debug] Load.apply: config.delegates took 0.2368ms
[debug] Load.apply: Def.make(settings)... took 134.6306ms
[debug] Load.apply: structureIndex took 33.2116ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to BowlingScore (in build file:/C:/Users/sorge/IdeaProjects/BowlingScore/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57348 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57348, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to BowlingScore (in build file:/C:/Users/sorge/IdeaProjects/BowlingScore/)
[debug] > Exec(idea-shell, None, None)
